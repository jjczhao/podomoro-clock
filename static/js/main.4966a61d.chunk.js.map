{"version":3,"sources":["TimerLengthController.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["TimerLengthController","props","react_default","a","createElement","className","id","labelId","title","dBId","onClick","timeLength","handleClick","lengthID","iBId","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","breakLength","sessionLength","clockRunning","phase","remainingTime","timerIntervalID","cStyle","startTimer","bind","assertThisInitialized","resetTimer","convertDisplayString","setBreakLength","setSessionLength","convertTimer","handleCountDown","setState","document","getElementById","play","clear","accurateInterval","aligned","immediate","pause","currentTime","remainingMinutes","Math","floor","remainingSeconds","t","bLength","sLength","src_TimerLengthController","style","color","preload","src","React","Component","App","src_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4966a61d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TimerLengthController(props){\r\n    return(\r\n        <div className={props.className}>\r\n            <h2 className=\"title-labels\" id={props.labelId}>{props.title}</h2>\r\n            <div className=\"row justify-content-between\">\r\n                <i id={props.dBId} className=\"fa fa-arrow-down fa-2x col-sm-2 clickable-button\" onClick={function(){\r\n                    if(props.timeLength - 1 >= 1){props.handleClick(props.timeLength - 1);}}}>\r\n                </i>\r\n                <h3 className=\"col-sm-4 title-labels\" id={props.lengthID}>{props.timeLength}</h3>\r\n                <i id={props.iBId} className=\"fa fa-arrow-up fa-2x col-sm-2 clickable-button\" onClick={function(){\r\n                    if(props.timeLength + 1 <= 60){props.handleClick(props.timeLength + 1);}}}>\r\n                </i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default TimerLengthController;\r\n","import React from 'react';\r\nimport TimeController from './TimerLengthController';\r\nimport accurateInterval from 'accurate-interval';\r\n\r\n\r\n\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            clockRunning: false,\r\n            phase: true,\r\n            remainingTime:  25 * 60,\r\n            timerIntervalID: '',\r\n            cStyle:false\r\n        };\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.resetTimer = this.resetTimer.bind(this);\r\n        this.convertDisplayString = this.convertDisplayString.bind(this);\r\n        this.setBreakLength = this.setBreakLength.bind(this);\r\n        this.setSessionLength = this.setSessionLength.bind(this);\r\n        this.convertTimer = this.convertTimer.bind(this);\r\n        this.handleCountDown = this.handleCountDown.bind(this);\r\n    }\r\n\r\n    handleCountDown(){\r\n        if(this.state.remainingTime > 0){\r\n            this.setState({remainingTime: this.state.remainingTime - 1});\r\n            if(this.state.remainingTime <= 60){\r\n                this.setState({cStyle:true});\r\n            }else{\r\n                this.setState({cStyle:false});\r\n            }\r\n        }else{\r\n            document.getElementById('beep').play();\r\n            this.setState({phase: !this.state.phase, remainingTime: this.state.phase ? this.state.breakLength * 60 : this.state.sessionLength * 60});\r\n        }\r\n    }\r\n\r\n    startTimer() {\r\n        if(!this.state.clockRunning){\r\n            this.setState({\r\n                clockRunning: true,\r\n                timerIntervalID: accurateInterval(this.handleCountDown, 1000, {aligned:true, immediate:true})\r\n            });\r\n        }else{\r\n            this.state.timerIntervalID && this.state.timerIntervalID.clear();\r\n            this.setState({\r\n                clockRunning:false,\r\n            });\r\n            \r\n        }   \r\n    }\r\n\r\n    resetTimer(){\r\n        this.state.timerIntervalID && this.state.timerIntervalID.clear();\r\n        document.getElementById('beep').pause();\r\n        document.getElementById('beep').currentTime = 0;\r\n        this.setState({\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            clockRunning: false,\r\n            phase: true,\r\n            remainingTime: 25 * 60,\r\n            timerIntervalID:'',\r\n            cStyle:false\r\n        });\r\n    }\r\n\r\n\r\n    convertDisplayString(){\r\n        let remainingMinutes = Math.floor(this.state.remainingTime / 60); \r\n        let remainingSeconds = this.state.remainingTime % 60;\r\n        return this.convertTimer(remainingMinutes) + ':' + this.convertTimer(remainingSeconds);\r\n    }\r\n\r\n    convertTimer(t){\r\n        return t < 10 ? '0' + t: t;\r\n    }\r\n\r\n    setBreakLength(bLength){\r\n        if(!this.state.clockRunning){\r\n            if(!this.state.phase)\r\n                this.setState({remainingTime:bLength*60});\r\n            this.setState({breakLength:bLength});\r\n        }\r\n    }\r\n    \r\n    setSessionLength(sLength){\r\n        if(!this.state.clockRunning){\r\n            if(this.state.phase)\r\n                this.setState({remainingTime:sLength*60});\r\n            this.setState({sessionLength:sLength});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"timer\">\r\n                <div className=\"row justify-content-center button-rows\">\r\n                    <TimeController className=\"col-sm-6\" lengthID=\"break-length\" iBId=\"break-increment\" dBId=\"break-decrement\" labelId=\"break-label\" title=\"Break Length\" timeLength={this.state.breakLength} handleClick={this.setBreakLength}></TimeController>\r\n                    <TimeController className=\"col-sm-6\" lengthID=\"session-length\" iBId=\"session-increment\" dBId=\"session-decrement\" labelId=\"session-label\" title=\"Session Length\" timeLength={this.state.sessionLength} handleClick={this.setSessionLength}></TimeController>\r\n                </div>\r\n                \r\n                <h3 className=\"title-labels\" id=\"timer-label\">{this.state.phase ? \"Session\" : \"Break\"}</h3>\r\n                <h3 id=\"time-left\" style={this.state.cStyle ? {color:\"red\"} : {color:\"black\"}}>{this.convertDisplayString()}</h3>\r\n                <div id=\"controlls\" className=\"row justify-content-center button-rows\">\r\n                    <div className=\"clickable-button col-sm-8\" id=\"start_stop\" onClick={this.startTimer}>\r\n                        <i className=\"fa fa-play fa-2x\" ></i>\r\n                        <i className=\"fa fa-pause fa-2x\"></i>\r\n                    </div>\r\n                    <i id=\"reset\" className=\"fa fa-refresh fa-2x clickable-button col-sm-4\" onClick={this.resetTimer}></i>\r\n                </div>\r\n                \r\n                <audio id=\"beep\" preload=\"auto\" \r\n          src=\"https://goo.gl/65cBl1\"></audio>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default Timer;","import React from 'react';\nimport './App.css';\nimport Timer from './Timer';\nclass App extends React.Component{\n  render(){\n    return(\n      <div id=\"wrapper\" className=\"text-center\">\n        <h1 id=\"title\">Pomodoro Clock</h1>\n        <Timer />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}